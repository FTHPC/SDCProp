#!/usr/bin/python
#####################################################################
#
# This file is licensed under the University of Illinois/NCSA Open 
# Source License. See LICENSE.TXT for details.
#
#####################################################################

#####################################################################
#
# Name: sdcprop-cc
#
# Description: Wrapper script to hide the process of compilation for 
#       fault injection and propagation tracking. Use it like you
#        would a regular compiler. This script performs a series of steps:
#
#        1.) Compile source code to LLVM IR
#        2.) Link other LLVM IR files needed for compilation
#        3.) Run the compiler pass on this linked IR to instrment code
#            - generate a log file that can be used to relate fault injection
#              locations to source lines
#        4.) Compile the transformed IR into object code
#
#####################################################################
import sys
import os
import glob
import time

# If there is a sdcprop-cc config file in the current 
# directory, use that if not use the one in the sdcprop directory
if os.path.isfile("config.py"):
    sys.path.insert(0, os.getcwd())
from config import *

argc = len(sys.argv)


def shouldInject(argv, notInject):
    #print argv
    for i in notInject:
        if i in argv:
            return False

    if "-V" in argv or "--version" in argv:
        return False
    if "-c" not in argv:
        return False
    return True

def addLibraryLinkage(cmd):
    if " -c " not in cmd:
        cmd += " -L" + FLIPIT_PATH + "/lib -lcorrupt " + SHOW
    return cmd

def removeLinking(flags):
    noLinker = " "
    for i in flags.split(" "):
        if i[0:2] == "-L" or i[0:2] =="-l" or i[0:2] == "-Z":
            continue
        else:
            noLinker += i + " "
    return noLinker

def setConfig(argv):
    configs = glob.glob('*.config')
    if len(configs) > 0:
        config = configs[0]

if (shouldInject(sys.argv, notInject)):
    #print "IFFFFFFFFFFFFFFFFFF"
    setConfig(sys.argv)

    step1 = LLVM_BUILD_PATH + "/bin/clang -g -emit-llvm -I/opt/cray/mpt/7.3.0/gni/mpich-gnu/4.9/include "
    step2 = LLVM_BUILD_PATH + "/bin/llvm-link " + SDCPROP_PATH +"/include/Instrumentation.bc "\
        + FLIPIT_PATH + "/include/FlipIt/corrupt/corrupt.bc "
    step3 = LLVM_BUILD_PATH + "/bin/opt -load "+ SDCPROP_PATH + "/lib/libSDCProp.so -SDCProp "# \
            #+ " -config " + config \
            #+ " -funcList " + funcList
    step4 = LLVM_BUILD_PATH + "/bin/clang -g " 
    fileName = ""
    fileNameBC = ""
    fileObj = ""


    #loop over argv and assign values as needed
    i = 1
    while i < argc: #sys.argv:
        arg = sys.argv[i]
        if arg == "-O2" or arg == "-O3" or arg =="-O5":
            arg = " " + arg + " "
            ##arg = " -g -O1 "#-emit-llvm "
            #step4 += "-01 "
        elif ".c" in arg:
            fileName = arg #[0:-2]# grab file name and path
        elif arg == "-o":
            step1 += arg + " "
            arg = sys.argv[i+1]
            fileObj = arg
            fileNameBC = arg[0:-2] + ".bc" #modify to generate .bc
            arg = fileNameBC
            i += 1
        #append arg
        step1 += arg + " "
        i += 1

    if SHOW != "":
        step1 += removeLinking(SHOW)

    #make sure the bitcode file name is set
    if fileNameBC == "":
        fileNameBC = fileName[0:fileName.rfind(".")] + ".bc"
    path = fileName[0:fileNameBC.rfind("/")]
    
    #grab the path the the file we are compiling to place the object file in the correct location
    pos = fileObj.rfind("/", 0, len(fileObj))
    filePath = "./"
    if pos != -1:
        filePath += fileObj[0:pos] + "/"
    
    #build commands to launch
    step2 +=  fileNameBC + " -o " + fileName + ".crpt.bc"
    step3 += " " + fileName + ".crpt.bc -o " + fileName + ".final.bc 2> " + fileName + ".LLVM.txt"
    step4 += "-O2  -c " + fileName + ".final.bc -o "
    
    #name the object file what a normal compiler would name it
    if fileObj == "":
        fileObj = fileName[0:fileObj.rfind(".")-1] + ".o"
    step4 += fileObj

    #check if we need to compile based on modified times
    if not (os.path.isfile(fileObj) and\
        (os.path.getmtime(fileObj) > os.path.getmtime(fileName))):
        # Compile the file to object code
        #os.system("rm "+ filePath +"*.bc")
        if verbose == True:
            print "\n\n========== Compiling file: ", fileName, " ==========\n\n", step1
        #if verbose == True:
        #    print step1 + "\n\n" + step2 + "\n\n" + step3 + "\n\n" + step4
        #print "DIR: ", os.path.abspath(__file__)
        #print "DIR: ", os.getcwd()
        #os.system("pwd")
        os.system(step1)
        
        if verbose == True:
            print step2
        os.system(step2)
        os.system(LLVM_BUILD_PATH + "/bin/opt --lowerinvoke " + fileName + ".crpt.bc -o " + fileName + ".crpt.bc")
        os.system(LLVM_BUILD_PATH + "/bin/opt --tailcallelim " + fileName + ".crpt.bc -o " + fileName + ".crpt.bc")
        os.system(LLVM_BUILD_PATH + "/bin/opt --lowerswitch " + fileName + ".crpt.bc -o " + fileName + ".crpt.bc")
        #os.system("cp " + fileNameBC + " " + fileName +".final.bc")
        #os.system("cp " + fileName +".crpt.bc " + fileName +".final.bc")
        
        if verbose == True:
            print step3
        os.system(step3)
        
        if verbose == True:
            print step4
        os.system(step4)
else:
    print "SHOULD INJECT ELSE"
    if "-V" in sys.argv or "--version" in sys.argv:
        print "SDCPROP Compiler wrapper around:\n"
        os.system(LLVM_BUILD_PATH + "/bin/clang --version")
    else: 
        sys.argv[0] = cc + " -I" + SDCPROP_PATH + "/include "\
            + " -I" + FLIPIT_PATH + "/include "
        print "ADD LIBRARY"
        print addLibraryLinkage(' '.join(sys.argv))
        os.system( addLibraryLinkage(' '.join(sys.argv)) )

